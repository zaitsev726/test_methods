package org.nsu.fit.tests.api.auth;

import io.qameta.allure.Feature;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import org.nsu.fit.services.rest.RestClient;
import org.nsu.fit.services.rest.data.AccountTokenPojo;
import org.nsu.fit.services.rest.data.ContactPojo;
import org.nsu.fit.services.rest.data.CustomerPojo;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import static org.testng.AssertJUnit.assertEquals;

public class AuthAsCustomerTest {
    private RestClient restClient;
    private AccountTokenPojo adminToken;
    private AccountTokenPojo customerToken;
    private CustomerPojo customerPojo;

    @BeforeClass
    public void beforeClass() {
        restClient = new RestClient();
    }

    @Test(description = "Authenticate as admin.")
    @Severity(SeverityLevel.BLOCKER)
    @Feature("Authentication feature.")
    public void authAsAdminTest() {
        adminToken = restClient.authenticate("admin", "setup");
    }

    @Test(description = "Authenticate as admin.",
            dependsOnMethods = "authAsAdminTest")
    @Severity(SeverityLevel.BLOCKER)
    @Feature("Authentication feature.")
    public void authAsCustomerTest() {
        customerPojo = restClient.createAutoGeneratedCustomer(adminToken);
        customerToken = restClient.authenticate(customerPojo.login, customerPojo.pass);
    }

    @Test(description = "Me.", dependsOnMethods = "authAsCustomerTest")
    @Severity(SeverityLevel.BLOCKER)
    @Feature("Authentication feature.")
    public void getMeTest() {
        CustomerPojo customerPojo = restClient.getMe(customerToken, CustomerPojo.class);
        assertEquals(customerPojo.firstName, customerPojo.firstName);
        assertEquals(customerPojo.lastName, customerPojo.lastName);
        assertEquals(customerPojo.login, customerPojo.login);
        assertEquals(customerPojo.balance, customerPojo.balance);
    }
}
